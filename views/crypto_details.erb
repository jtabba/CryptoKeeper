
<img class="logo" style="padding-top: 15px;" src="media/logo.png" alt="">

<div class="chart_container">
  <a href=  "/" style="text-align: left; margin: 0; margin: 0px -60px 0px -10px; font-size: 18px;">Back</a>
  <div style=" margin-top: 40px;" class="chart_values">
    <img style="height: 100px; width: 100px; padding-right: 44px; padding-bottom: 10px;" src="https://www.cryptocompare.com/<%= image %>"> 
    <h1 style="font-weight: 400; color: goldenrod; margin: 0; font-weight: strong;"><%= from_symbol %></h1>
    <div style="display: inline-block;">
      <span style="font-weight: 100; color: #14e715; margin: 0; font-weight: strong;">$<%= current_price %></span><span style="font-weight: 100;"> USD</span>
    </div>
    <p style="padding-bottom: 0px; margin: 20px 0px 0px 0px; font-weight: bold;">24 hour high</p>
    <p style="color: grey; margin: 5px;">$ <%= high %></p>
    <p style="padding-bottom: 0px; margin: 20px 0px 0px 0px; font-weight: bold;">24 hour low</p>
    <p style="color: grey; margin: 5px;">$ <%= low %></p>
    <p style="padding-bottom: 0px; margin: 20px 0px 0px 0px; font-weight: bold;">24 hour difference</p>
    <% if change_day > 0.01 %>
        <p style="color: #14e715; margin: 5px;">$ <%= change_day.round(2) %></p>
    <% elsif change_day < 0 %>
        <p style="color: red; margin: 5px;">$ <%= change_day.round(2) %></p>
    <% else %>
        <p style="color: white; margin: 5px;">$ <%= change_day.round(2) %></p>
    <% end %>
    <p style="padding-bottom: 0px; margin: 20px 0px 0px 0px; font-weight: bold;">24 hour change</p>

    <% if change_percent > 0.01 %>
        <p class="percentage" style="color: #14e715; margin: 5px;"><%= change_percent.round(2) %> %</p>
      <% elsif change_percent < 0 %>
        <p class="percentage" style="color: red; margin: 5px;"><%= change_percent.round(2) %> %</p>
      <% else %>
        <p class="percentage" style="color: white; margin: 5px;"> <%= change_percent.round(2) %> %</p>
      <% end %>
    <p style="padding-bottom: 0px; margin: 20px 0px 0px 0px; font-weight: bold;">Marketcap</p>
    <p style="color: grey; margin: 5px 0px 100px 0px;">><%= marketcap %></p>
  </div>
  <div class="chart_canvas">
    <p style="margin: 70px 0px 0px 0px; font-size: 20px; font-weight: 200; color: white;"><%= from_symbol %> 3 Month Price Chart</p>
    <%# <span>
      <form action="">
        <input type="hidden" name="" class="chart-time-input" value="2000">
        <input type="hidden" name="" class="chart-time-input" value="hour">
        <button class="year-chart-btn">Year</button>
        <button>3 Months</button>
        <button>1 Month</button>
        <button>day</button>
        <button>hour</button>
      </form>
    </span> %>
    <canvas style="margin: 30px 0 0 0;" class="cryptoChart"></canvas>
  </div>
</div>
<div style="margin-bottom: 150px;"></div>

<script>

// let chartCanvas = document.querySelector('.chart_canvas')
// let yearChart = document.querySelector('.year-chart-btn')
// let chartInput = document.querySelector('.chart-time-input')
cryptoChartGraph = document.querySelector('.cryptoChart')


const cryptoData = async () => {
  const response = await fetch(`https://min-api.cryptocompare.com/data/v2/histohour?fsym=<%= from_symbol %>&tsym=USD&limit=2000&api_key=0646cc7b8a4d4b54926c74e0b20253b57fd4ee406df79b3d57d5439874960146`);
  const json = await response.json();
  const data = json.Data.Data
  const time = data.map(obj => obj.time)
  const prices = data.map(obj => obj.high)
  return {
    time,
    prices
  }
}

function checkStatus(response) {
  if (response.ok) {
    return Promise.resolve(response);
  } else {
    return Promise.reject(new Error(response.statusText));
  }
}

let createCryptoChart

async function printCryptoChart() {
  let { time, prices } = await cryptoData()

  let cryptoChart = cryptoChartGraph.getContext('2d');

  let gradient = cryptoChart.createLinearGradient(0, 0, 0, 400);

  gradient.addColorStop(0, 'rgba(247,147,26,.5)');
  gradient.addColorStop(.425, 'rgba(255,193,119,0)');

  Chart.defaults.global.defaultFontFamily = 'Red Hat Text';
  Chart.defaults.global.defaultFontSize = 15;

  createCryptoChart = new Chart(cryptoChart, {
    type: 'line',
    data: {
      labels: time.map(time => new Date(time * 1000)
                  .toLocaleString(
                    { timeZone: "Australia/Sydney" }, 
                    { year: "numeric", month: "2-digit", day: "2-digit" })),
      datasets: [{
        label: '$',
        data: prices,
        backgroundColor: gradient,
        borderColor: 'rgba(247,147,26,1)',
        borderJoinStyle: 'round',
        borderCapStyle: 'round',
        borderWidth: 3,
        pointRadius: 0,
        pointHitRadius: 10,
        lineTension: .2,
      }]
    },

    options: {
      title: {
        display: false,
        text: 'Crypto Chart',
        fontSize: 35
      },

      legend: {
        display: false
      },

      layout: {
        padding: {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }
      },
      scales: {
      xAxes: [{
        gridLines: {
              display: true,
              color: 'rgba(250,250,250,0.1)',
              },
          ticks: {
              source: 'auto',
              fontFamily: 'Arial, Helvetica, sans-serif',
              fontColor: 'rgba(250,250,250,0.6)'
              }
          }],
          yAxes: [{
          display: true,
          gridLines: {
              display: true,
              color: 'rgba(250,250,250,0.1)'
              },
          ticks: {
              fontFamily: 'Arial, Helvetica, sans-serif',
              fontColor: 'rgba(250,250,250,0.6)'
              }
        }]
      },
      tooltips: {
      //   callbacks: {
      //     title: function() {}
      //  },
      //   displayColors: false,
      //   yPadding: 10,
      //   xPadding: 10,
      //   position: 'nearest',
      //   caretSize: 10,
      //   backgroundColor: 'rgba(255,255,255,.9)',
      //   bodyFontSize: 15,
        bodyFontFamily: 'Arial, Helvetica, sans-serif',
        bodyFontColor: 'whitesmoke' 
      }
    }
  });
}
async function updateCryptoPrice() {
  let { time, prices } = await cryptoData()
  let currentPrice = prices[prices.length-1].toFixed(2);

  document.getElementById("btcPrice").innerHTML = "$" + currentPrice;
}

printCryptoChart()
updateCryptoPrice()



</script>
